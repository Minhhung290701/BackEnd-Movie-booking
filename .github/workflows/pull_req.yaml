# This is a basic workflow to help you get started with Actions

name: Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  image_repository: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.APP_NAME }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tags.outputs.value }}    
    steps:
      - uses: actions/checkout@v3
  
      - name: Login docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Get tags
        id: tags
        run: |
          TAGS=${GITHUB_SHA::8}
          echo $TAGS
          echo "::set-output name=value::$(echo $TAGS)"
        shell: bash

      - name: Check if docker image existed
        id: existed
        run: docker manifest inspect ${{ env.image_repository }}:${{ steps.tags.outputs.value }}
        continue-on-error: true
      
      - name: Set up Docker Buildx
        if: steps.existed.outcome == 'failure'
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        if: steps.existed.outcome == 'failure'
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile.v2
          push: true
          tags: ${{ env.image_repository }}:${{ steps.tags.outputs.value }}
          cache-from: type=registry,ref=${{ env.image_repository }}:buildcache
          cache-to: type=registry,ref=${{ env.image_repository }}:buildcache,mode=max